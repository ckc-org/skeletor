version: 2
jobs:
    test:
        docker:
            - image: cimg/python:3.9.1
              environment:
                  DATABASE_URL: postgresql://postgres@localhost/circle_test
            - image: circleci/postgres:12-alpine
        steps:
            - checkout
            - run: cp .env_sample .env

            - restore_cache:
                keys:
                    - python-cache-key-{{ checksum "requirements.txt" }}-{{ checksum "requirements.dev.txt" }}
            - run: pip install -r requirements.dev.txt
            - save_cache:
                key: python-cache-key-{{ checksum "requirements.txt" }}-{{ checksum "requirements.dev.txt" }}
                paths:
                  - /home/circleci/.cache/pip
                  - /home/circleci/.pyenv

            - run: curl https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh --output nvm_install.sh
            - run:
                  name: Tar frontend code for checksum calculation
                  command: tar --sort=name --mtime="1970-01-01" -cf frontend.tar src/frontend
            - restore_cache:
                  keys:
                      - frontend-cache-key-{{ checksum "frontend.tar" }}-{{ checksum "package.json" }}-{{ checksum "nvm_install.sh" }}
            - run:
                  name: Install specific node version and build Vue code
                  command: |
                      set +e
                      if [ -d "$HOME/.nvm" ]; then
                          echo "node already installed and frontend already built."
                      else
                          bash nvm_install.sh
                          export NVM_DIR="$HOME/.nvm"
                          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                          nvm install v10.15.1
                          nvm alias default v10.15.1
                          # Each step uses the same `$BASH_ENV`, so need to modify it
                          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
                          echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
                          cd src/frontend && npm install . && npm run generate
                      fi
                  environment:
                      DOMAIN: localhost
            - save_cache:
                  key: frontend-cache-key-{{ checksum "frontend.tar" }}-{{ checksum "package.json" }}-{{ checksum "nvm_install.sh" }}
                  paths:
                      - /home/circleci/.nvm
                      - src/frontend/build/generated
                      - src/frontend/node_modules
            - run:
                  name: Wait for db
                  command: echo 'while ! nc -z localhost 5432; do sleep 1 && echo hi; done;' > wait_for_db.sh;
                        chmod +x wait_for_db.sh;
                        timeout 60 ./wait_for_db.sh;

            - run: cd src/backend; py.test --create-db --cov=.
                  --cov-report html:/home/circleci/project/artifacts/coverage --cov-report --cov-fail-under=100
                  annotate:/home/circleci/project/artifacts/coverage_annotated tests/

            - run:
                name: eslint
                command: cd src/frontend && yarn run eslint --ext js,jsx,vue .

            - run:
                name: frontend tests
                command: cd src/frontend && yarn run test

            - store_artifacts:
                  path: artifacts/
    flake8:
        docker:
            - image: cimg/python:3.9.1
        steps:
            - checkout

            - restore_cache:
                  keys:
                      - python-cache-key-{{ checksum "requirements.txt" }}-{{ checksum "requirements.dev.txt" }}
            - run: pip install -r requirements.dev.txt
            - save_cache:
                  key: python-cache-key-{{ checksum "requirements.txt" }}-{{ checksum "requirements.dev.txt" }}
                  paths:
                      - /home/circleci/.cache/pip
                      - /home/circleci/.pyenv
            - run: cd src/backend; flake8
workflows:
    version: 2
    build_and_test:
        jobs:
            - flake8
            - test
